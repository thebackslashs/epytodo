openapi: 3.0.3
info:
  title: EpyTodo API
  version: 1.0.0
  description: RESTful API for a Todo application with user authentication

servers:
  - url: http://localhost:{port}
    variables:
      port:
        default: '3000'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: integer, default: 0 }
        email: { type: string, default: 'jean@exemple.com' }
        password: { type: string, default: '{{HASH_PASSWORD}}' }
        firstname: { type: string, default: 'Jean' }
        name: { type: string, default: 'Joe' }
        created_at: { type: string, default: '2021-03-03 19:24:00' }

    Todo:
      type: object
      properties:
        id: { type: integer, default: 0 }
        title: { type: string, default: 'Check coding style' }
        description:
          {
            type: string,
            'Ensure that our code base complies with Epitech development standards',
          }
        created_at: { type: string, default: 2021-03-03 19:24:00" }
        due_time: { type: string, default: 2021-03-03 19:24:00" }
        user_id: { type: integer }
        status:
          {
            type: string,
            default: 'not started',
            enum: ['not started', 'todo', 'in progress', 'done'],
          }

    Token:
      type: object
      properties:
        token: { type: string }

    Message:
      type: object
      properties:
        msg:
          type: string
          enum:
            [
              'Account already exists',
              'Bad parameter',
              'Not found',
              'Internal server error',
              'No token, authorization denied',
              'Token is not valid',
              'Invalid Credentials',
            ]
      required: [msg]

  responses:
    Unauthorized:
      description: Unauthorized - No token or invalid token
      content:
        application/json:
          examples:
            noToken:
              value: { msg: 'No token, authorization denied' }
            invalidToken:
              value: { msg: 'Token is not valid' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example:
            msg: Not found
    BadRequest:
      description: Bad parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example:
            msg: Bad parameter
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example:
            msg: Internal server error

security:
  - BearerAuth: []

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
                firstname: { type: string }
                name: { type: string }
              required: [email, password, firstname, name]
      responses:
        '201':
          {
            description: User registered,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/Token' } },
              },
          }
        '400':
          {
            description: Account already exists or bad parameter,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/Message' },
                    examples:
                      {
                        exists: { value: { msg: 'Account already exists' } },
                        bad: { value: { msg: 'Bad parameter' } },
                      },
                  },
              },
          }
        '500': { $ref: '#/components/responses/InternalError' }

  /login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        '200':
          {
            description: Successful login,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/Token' } },
              },
          }
        '401':
          {
            description: Invalid credentials,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/Message' },
                    example: { msg: 'Invalid Credentials' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalError' }

  /user:
    get:
      summary: Get current user information
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          {
            description: User data,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/User' } },
              },
          }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalError' }

  /user/todos:
    get:
      summary: Get all todos for the logged-in user
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          {
            description: List of user todos,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: '#/components/schemas/Todo' },
                      },
                  },
              },
          }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalError' }

  /users/{identifier}:
    get:
      summary: Get a user by ID or email
      security: [{ BearerAuth: [] }]
      parameters:
        - name: identifier
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          {
            description: User data,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/User' } },
              },
          }
        '404': { $ref: '#/components/responses/NotFound' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalError' }

  /users/{id}:
    put:
      summary: Update user information
      security: [{ BearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email: { type: string }
                password: { type: string }
                firstname: { type: string }
                name: { type: string }
      responses:
        '204':
          {
            description: Updated user,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/User' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalError' }

    delete:
      summary: Delete a user
      security: [{ BearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204':
          {
            description: User deleted,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/Message' },
                    example:
                      { msg: 'Successfully deleted record number: {id}' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalError' }

  /todos:
    get:
      summary: Get all todos
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          {
            description: List of todos,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: '#/components/schemas/Todo' },
                      },
                  },
              },
          }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalError' }

    post:
      summary: Create a new todo
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title: { type: string }
                description: { type: string }
                due_time: { type: string, format: date-time }
                user_id: { type: integer }
                status: { type: string }
      responses:
        '200':
          {
            description: Created todo,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/Todo' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalError' }

  /todos/{id}:
    get:
      summary: Get a todo by ID
      security: [{ BearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          {
            description: A todo,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/Todo' } },
              },
          }
        '404': { $ref: '#/components/responses/NotFound' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalError' }

    put:
      summary: Update a todo
      security: [{ BearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title: { type: string }
                description: { type: string }
                due_time: { type: string, format: date-time }
                user_id: { type: integer }
                status: { type: string }
      responses:
        '204':
          {
            description: Updated todo,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/Todo' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalError' }

    delete:
      summary: Delete a todo
      security: [{ BearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204':
          {
            description: Todo deleted,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/Message' },
                    example:
                      { msg: 'Successfully deleted record number: {id}' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalError' }
