// This file is auto-generated by @hey-api/openapi-ts

export type User = {
  id?: number;
  email?: string;
  password?: string;
  firstname?: string;
  name?: string;
  created_at?: string;
};

export type Todo = {
  id?: number;
  title?: string;
  description?: string;
  created_at?: string;
  due_time?: string;
  user_id?: number;
  status?: 'not started' | 'todo' | 'in progress' | 'done';
};

export type Token = {
  token?: string;
};

export type Message = {
  msg:
    | 'Email already exists'
    | 'Bad parameter'
    | 'Not found'
    | 'Internal server error'
    | 'No token, authorization denied'
    | 'Token is not valid'
    | 'Invalid Credentials';
};

export type PostRegisterData = {
  body: {
    email: string;
    password: string;
    firstname: string;
    name: string;
  };
  path?: never;
  query?: never;
  url: '/register';
};

export type PostRegisterErrors = {
  /**
   * Account already exists or bad parameter
   */
  400: Message;
  /**
   * Internal server error
   */
  500: Message;
};

export type PostRegisterError = PostRegisterErrors[keyof PostRegisterErrors];

export type PostRegisterResponses = {
  /**
   * User registered
   */
  201: Token;
};

export type PostRegisterResponse = PostRegisterResponses[keyof PostRegisterResponses];

export type PostLoginData = {
  body: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: '/login';
};

export type PostLoginErrors = {
  /**
   * Bad parameters
   */
  400: Message;
  /**
   * Invalid credentials
   */
  401: Message;
  /**
   * Internal server error
   */
  500: Message;
};

export type PostLoginError = PostLoginErrors[keyof PostLoginErrors];

export type PostLoginResponses = {
  /**
   * Successful login
   */
  200: Token;
};

export type PostLoginResponse = PostLoginResponses[keyof PostLoginResponses];

export type GetUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/user';
};

export type GetUserErrors = {
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Internal server error
   */
  500: Message;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
  /**
   * User data
   */
  200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type GetUserTodosData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/user/todos';
};

export type GetUserTodosErrors = {
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Internal server error
   */
  500: Message;
};

export type GetUserTodosError = GetUserTodosErrors[keyof GetUserTodosErrors];

export type GetUserTodosResponses = {
  /**
   * List of user todos
   */
  200: Array<Todo>;
};

export type GetUserTodosResponse = GetUserTodosResponses[keyof GetUserTodosResponses];

export type GetUsersByIdentifierData = {
  body?: never;
  path: {
    identifier: string;
  };
  query?: never;
  url: '/users/{identifier}';
};

export type GetUsersByIdentifierErrors = {
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Resource not found
   */
  404: Message;
  /**
   * Internal server error
   */
  500: Message;
};

export type GetUsersByIdentifierError =
  GetUsersByIdentifierErrors[keyof GetUsersByIdentifierErrors];

export type GetUsersByIdentifierResponses = {
  /**
   * User data
   */
  200: User;
};

export type GetUsersByIdentifierResponse =
  GetUsersByIdentifierResponses[keyof GetUsersByIdentifierResponses];

export type DeleteUsersByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: '/users/{id}';
};

export type DeleteUsersByIdErrors = {
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Resource not found
   */
  404: Message;
  /**
   * Internal server error
   */
  500: Message;
};

export type DeleteUsersByIdError = DeleteUsersByIdErrors[keyof DeleteUsersByIdErrors];

export type DeleteUsersByIdResponses = {
  /**
   * User deleted
   */
  204: Message;
};

export type DeleteUsersByIdResponse = DeleteUsersByIdResponses[keyof DeleteUsersByIdResponses];

export type PutUsersByIdData = {
  body: {
    email?: string;
    password?: string;
    firstname?: string;
    name?: string;
  };
  path: {
    id: number;
  };
  query?: never;
  url: '/users/{id}';
};

export type PutUsersByIdErrors = {
  /**
   * Bad parameters
   */
  400: Message;
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Resource not found
   */
  404: Message;
  /**
   * Internal server error
   */
  500: Message;
};

export type PutUsersByIdError = PutUsersByIdErrors[keyof PutUsersByIdErrors];

export type PutUsersByIdResponses = {
  /**
   * Updated user
   */
  204: User;
};

export type PutUsersByIdResponse = PutUsersByIdResponses[keyof PutUsersByIdResponses];

export type GetTodosData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/todos';
};

export type GetTodosErrors = {
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Internal server error
   */
  500: Message;
};

export type GetTodosError = GetTodosErrors[keyof GetTodosErrors];

export type GetTodosResponses = {
  /**
   * List of todos
   */
  200: Array<Todo>;
};

export type GetTodosResponse = GetTodosResponses[keyof GetTodosResponses];

export type PostTodosData = {
  body: {
    title?: string;
    description?: string;
    due_time?: string;
    user_id?: number;
    status?: string;
  };
  path?: never;
  query?: never;
  url: '/todos';
};

export type PostTodosErrors = {
  /**
   * Bad parameters
   */
  400: Message;
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Internal server error
   */
  500: Message;
};

export type PostTodosError = PostTodosErrors[keyof PostTodosErrors];

export type PostTodosResponses = {
  /**
   * Created todo
   */
  200: Todo;
};

export type PostTodosResponse = PostTodosResponses[keyof PostTodosResponses];

export type DeleteTodosByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: '/todos/{id}';
};

export type DeleteTodosByIdErrors = {
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Resource not found
   */
  404: Message;
  /**
   * Internal server error
   */
  500: Message;
};

export type DeleteTodosByIdError = DeleteTodosByIdErrors[keyof DeleteTodosByIdErrors];

export type DeleteTodosByIdResponses = {
  /**
   * Todo deleted
   */
  204: Message;
};

export type DeleteTodosByIdResponse = DeleteTodosByIdResponses[keyof DeleteTodosByIdResponses];

export type GetTodosByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: '/todos/{id}';
};

export type GetTodosByIdErrors = {
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Resource not found
   */
  404: Message;
  /**
   * Internal server error
   */
  500: Message;
};

export type GetTodosByIdError = GetTodosByIdErrors[keyof GetTodosByIdErrors];

export type GetTodosByIdResponses = {
  /**
   * A todo
   */
  200: Todo;
};

export type GetTodosByIdResponse = GetTodosByIdResponses[keyof GetTodosByIdResponses];

export type PutTodosByIdData = {
  body: {
    title?: string;
    description?: string;
    due_time?: string;
    user_id?: number;
    status?: string;
  };
  path: {
    id: number;
  };
  query?: never;
  url: '/todos/{id}';
};

export type PutTodosByIdErrors = {
  /**
   * Bad parameters
   */
  400: Message;
  /**
   * Unauthorized - No token or invalid token
   */
  401: unknown;
  /**
   * Resource not found
   */
  404: Message;
  /**
   * Internal server error
   */
  500: Message;
};

export type PutTodosByIdError = PutTodosByIdErrors[keyof PutTodosByIdErrors];

export type PutTodosByIdResponses = {
  /**
   * Updated todo
   */
  204: Todo;
};

export type PutTodosByIdResponse = PutTodosByIdResponses[keyof PutTodosByIdResponses];

export type ClientOptions = {
  baseUrl: 'http://localhost:{port}' | (string & {});
};
