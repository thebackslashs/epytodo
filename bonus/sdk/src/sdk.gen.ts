// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostRegisterData, PostRegisterResponse, PostRegisterError, PostLoginData, PostLoginResponse, PostLoginError, GetUserData, GetUserResponse, GetUserError, GetUserTodosData, GetUserTodosResponse, GetUserTodosError, GetUsersByIdentifierData, GetUsersByIdentifierResponse, GetUsersByIdentifierError, DeleteUsersByIdData, DeleteUsersByIdResponse, DeleteUsersByIdError, PutUsersByIdData, PutUsersByIdResponse, PutUsersByIdError, GetTodosData, GetTodosResponse, GetTodosError, PostTodosData, PostTodosResponse, PostTodosError, DeleteTodosByIdData, DeleteTodosByIdResponse, DeleteTodosByIdError, GetTodosByIdData, GetTodosByIdResponse, GetTodosByIdError, PutTodosByIdData, PutTodosByIdResponse, PutTodosByIdError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register a new user
 */
export const postRegister = <ThrowOnError extends boolean = false>(options: Options<PostRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRegisterResponse, PostRegisterError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Log in a user
 */
export const postLogin = <ThrowOnError extends boolean = false>(options: Options<PostLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLoginResponse, PostLoginError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get current user information
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user',
        ...options
    });
};

/**
 * Get all todos for the logged-in user
 */
export const getUserTodos = <ThrowOnError extends boolean = false>(options?: Options<GetUserTodosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserTodosResponse, GetUserTodosError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/todos',
        ...options
    });
};

/**
 * Get a user by ID or email
 */
export const getUsersByIdentifier = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdentifierData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdentifierResponse, GetUsersByIdentifierError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{identifier}',
        ...options
    });
};

/**
 * Delete a user
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByIdResponse, DeleteUsersByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user information
 */
export const putUsersById = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByIdResponse, PutUsersByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all todos
 */
export const getTodos = <ThrowOnError extends boolean = false>(options?: Options<GetTodosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTodosResponse, GetTodosError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos',
        ...options
    });
};

/**
 * Create a new todo
 */
export const postTodos = <ThrowOnError extends boolean = false>(options: Options<PostTodosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTodosResponse, PostTodosError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a todo
 */
export const deleteTodosById = <ThrowOnError extends boolean = false>(options: Options<DeleteTodosByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTodosByIdResponse, DeleteTodosByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{id}',
        ...options
    });
};

/**
 * Get a todo by ID
 */
export const getTodosById = <ThrowOnError extends boolean = false>(options: Options<GetTodosByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTodosByIdResponse, GetTodosByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{id}',
        ...options
    });
};

/**
 * Update a todo
 */
export const putTodosById = <ThrowOnError extends boolean = false>(options: Options<PutTodosByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTodosByIdResponse, PutTodosByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};